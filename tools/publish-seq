var fs = require('fs');
var path = require('path')
var util = require('util');
var uglify = require('uglify-js2');

if(process.argv.length < 4)
{
	console.log('Usage: publish-seq <JSON> <Asset dir>');
	return;
}

// Set of plugins that may contain references to external dependencies.
var url_plugins = [
	'url_audio_buffer_generator',
	'url_audio_generator',
	'url_json_generator',
	'url_scene_generator',
	'url_texture_generator',
	'url_video_generator'
];

// Set of plugins that can be removed without compromising graph functionality.
var filtered_plugins = [
	'annotation',
	'bool_display',
	'color_display',
	'data_info_display',
	'float_display',
	'led_display',
	'log_display',
	'matrix_display',
	'object_display',
	'plot_display',
	'text_display',
	'vector_display'
];

// Set of plugins the title of which has a functional purpose and must thus be retained.
var maintain_title = [
	'register_global_read',
	'register_global_write',
	'register_local_read',
	'register_local_write'
];

var ext_plugin_dependencies = {
	'module_player': 'module_player',
	'csg_cube_generator': 'csg',
	'csg_cylinder_generator': 'csg',
	'csg_sphere_generator': 'csg',
	'csg_difference_modulator': 'csg',
	'csg_intersection_modulator': 'csg',
	'csg_inverse_modulator': 'csg',
	'csg_to_mesh_modulator': 'csg',
	'csg_union_modulator': 'csg',
	'osc_float': 'osc',
	'osc_receiver': 'osc',
	'osc_xy_float': 'osc',
	'wschannel_send': 'wschannel',
	'wschannel_receive': 'wschannel'
};

var unique_plugins = [];
var ext_depends = [];

function minifyBuffer(code)
{
	var ast = uglify.parse(code);
	
	ast.figure_out_scope();
	
	var compressor = uglify.Compressor({ 'dead_code': false, 'unused': false });
	var comp_ast = ast.transform(compressor);
	
	return comp_ast.print_to_string();
}

function minify(src, dst)
{
	//fs.writeFileSync(dst, minifyBuffer(fs.readFileSync(src, { encoding: 'utf8' })));
	fs.writeFileSync(dst, fs.readFileSync(src, { encoding: 'utf8' }));

}

function mkdirsSync(p)
{
	var dirs = p.split(path.sep);
	var root = '';

	while(dirs.length > 0)
	{
		var dir = dirs.shift();
		
		if (dir === '')
			root = path.sep;
		
		var nxt = root + dir;
		
		if(!fs.existsSync(nxt))
			fs.mkdirSync(nxt);
		
		root += dir + path.sep;
	}
}

function rmdirsSync(p)
{
    if(fs.existsSync(p))
    {
        fs.readdirSync(p).forEach(function(file, index)
        {
		var cp = path.join(p, file);

		if(fs.lstatSync(cp).isDirectory())
			rmdirsSync(cp);
		else
			fs.unlinkSync(cp);
        });
        
        fs.rmdirSync(p);
    }
};

function copy(src, dst)
{
	fs.createReadStream(src).pipe(fs.createWriteStream(dst));
}

function minify_json(file)
{
	var json = JSON.parse(fs.readFileSync(file, 'utf8'));
	
	fs.writeFileSync(file, JSON.stringify(json));
}

function copy_file(src, data_dir, pub_dir)
{
	var a_src = path.join(data_dir, src);
	var dst_name = path.join(pub_dir, src);
	var dst_dir = path.dirname(dst_name);
	
	mkdirsSync(dst_dir);
	copy(a_src, dst_name);
}

function copy_legacy_audio(src, data_dir, pub_dir)
{
	var dst_dir = path.dirname(path.join(pub_dir, src));
	
	mkdirsSync(dst_dir);

	if(fs.existsSync(path.join(data_dir, src) + '.ogg'))
		copy(path.join(data_dir, src) + '.ogg', path.join(pub_dir, src) + '.ogg');

	if(fs.existsSync(path.join(data_dir, src) + '.mp3'))
		copy(path.join(data_dir, src) + '.mp3', path.join(pub_dir, src) + '.mp3');
}

function copy_scene(src, data_dir, pub_dir)
{
	var a_src = path.join(data_dir, src);
	var dst_name = path.join(pub_dir, src);
	var dst_dir = path.dirname(dst_name);
	
	mkdirsSync(dst_dir);
	
	var sp = path.dirname(a_src);
	
        fs.readdirSync(sp).forEach(function(file, index)
        {
		var cp = path.join(sp, file);

		if(!fs.lstatSync(cp).isDirectory())
			copy(cp, path.join(dst_dir, file));
        });
}

function process_graph(graph, data_dir, pub_dir)
{
	var nodes = graph.nodes;
	
	for(var i = 0, len = nodes.length; i < len; i++)
	{
		var node = nodes[i];
		
		if(node.plugin === 'graph' || node.plugin === 'loop')
			process_graph(node.graph, data_dir, pub_dir);
		else if(url_plugins.indexOf(node.plugin) !== -1 && node.state.url !== '')
		{
			if(node.plugin === 'url_scene_generator')
				copy_scene(node.state.url, data_dir, pub_dir);
			else if(node.plugin === 'url_audio_generator')
				copy_legacy_audio(node.state.url, data_dir, pub_dir);
			else
				copy_file(node.state.url, data_dir, pub_dir);
		}
	}
}

function prune_dynamic_slots(d_slots)
{
	for(var i = 0, len = d_slots.length; i < len; i++)
	{
		var slot = d_slots[i];
		
		delete slot.name;
		delete slot.desc;
		delete slot.index;
		delete slot.type;
		delete slot.connected;
		delete slot.is_connected;
		delete slot.def;
	}
}

function removeItem(coll, item)
{
	var idx = coll.indexOf(item);
	if(idx > -1)
		coll.splice(idx, 1);
}

function delete_node(graph, node)
{
	var conns = graph.conns;
	var pruned = [];
	var nuid = node.uid;

	removeItem(graph.nodes, node);
	
	for(var i = 0, len = conns.length; i < len; i++)
	{
		var c = conns[i];
		
		if(c.src_nuid === nuid || c.dst_nuid === nuid)
			pruned.push(c);
	}
	
	for(var i = 0, len = pruned.length; i < len; i++)
		removeItem(conns, pruned[i]);
}

function optimize_plugin(code)
{
	var ast = uglify.parse(code);
	var toplevel = ast.body;
	var pending = [];

	for(var i = 1; i < toplevel.length; i++)
	{
		var func = toplevel[i];
		var id = func.body.left.property;

		if(id === 'create_ui' || id === 'open_editor' || id === 'connection_changed')
			pending.push(func);
	}

	for(var i = 0; i < pending.length; i++)
		toplevel.splice(toplevel.indexOf(pending[i]), 1)

	var init = toplevel[0].body.right.right.body;
	var desc = null;

	function remove_prop(item, id)
	{
		var props = item.properties;
	
		for(var c = 0; c < props.length; c++)
		{
			if(props[c].key === id)
			{
				props.splice(c, 1);
				return;
			}
		}
	}

	for(var i = 0; i < init.length; i++)
	{
		// Deal with local variable declarations in the initialization function scope.
		if(!init[i].body)
			continue;

		// Deal with empty input / output slot collections.
		if(!init[i].body.left)
			continue;
	
		var id = init[i].body.left.property;
	
		if(id === 'desc')
			desc = init[i];
		else if(id === 'input_slots' || id === 'output_slots')
		{
			var items = init[i].body.right.elements;
		
			for(var i2 = 0; i2 < items.length; i2++)
			{
				var item = items[i2];
			
				remove_prop(item, 'name');
				remove_prop(item, 'desc');
				remove_prop(item, 'def');
				remove_prop(item, 'lo');
				remove_prop(item, 'hi');
			}
		}
	}

	if(desc)
		init.splice(init.indexOf(desc), 1);

	ast.figure_out_scope();
	
	var compressor = uglify.Compressor({ 'dead_code': false, 'unused': false });
	var comp_ast = ast.transform(compressor);
	
	return comp_ast.print_to_string();
}

function optimize_graph(graph)
{
	var nodes = graph.nodes;
	var pruned = [];
	
	delete graph.open;
	delete graph.scroll;
	
	for(var i = 0, len = nodes.length; i < len; i++)
	{
		var node = nodes[i];
		
		if(node.plugin === 'graph' || node.plugin === 'loop')
			optimize_graph(node.graph);
		else if(filtered_plugins.indexOf(node.plugin) > -1)
			pruned.push(node);
		
		delete node.x;
		delete node.y;

		if(maintain_title.indexOf(node.plugin) === -1)
			delete node.title;

		if(node.dyn_in)
			prune_dynamic_slots(node.dyn_in);

		if(node.dyn_out)
			prune_dynamic_slots(node.dyn_out);
	}
	
	for(var i = 0, len = pruned.length; i < len; i++)
		delete_node(graph, pruned[i]);

	var conns = graph.conns;
	
	for(var i = 0, len = conns.length; i < len; i++)
	{
		var conn = conns[i];
		
		delete conn.offset;
	}
}

function find_unique_plugins(graph)
{
	var nodes = graph.nodes;
	
	for(var i = 0, len = nodes.length; i < len; i++)
	{
		var node = nodes[i];
		
		if(unique_plugins.indexOf(node.plugin) === -1)
		{
			unique_plugins.push(node.plugin);
		
			if(ext_plugin_dependencies.hasOwnProperty(node.plugin))
			{
				var dep = ext_plugin_dependencies[node.plugin];
				
				if(ext_depends.indexOf(dep) === -1)
					ext_depends.push(dep);
			}
		}
		
		if(node.plugin === 'graph' || node.plugin === 'loop')
			find_unique_plugins(node.graph);
	}
}

function publish(seq, data_dir)
{
	// Create the publishing dir, if it doesn't exist.
	var pub_dir = path.join(data_dir, 'published', path.basename(seq, '.json'));
	
	var data = JSON.parse(fs.readFileSync(seq, 'utf8'));
	
	pub_dir = path.join(pub_dir, path.basename(seq, '.json'));
	
	if(fs.existsSync(pub_dir))
	{
		console.log('Removing existing published project files.');
		rmdirsSync(pub_dir);
	}
	
	fs.mkdirSync(pub_dir);

	process_graph(data.root, data_dir, pub_dir);
	optimize_graph(data.root);
	
	fs.writeFileSync(path.join(pub_dir, 'scene.json'), JSON.stringify(data));
	
	var img_src = path.join('browser', 'images');
	var img_dst = path.join(pub_dir, 'images');
	
	fs.mkdirSync(img_dst);
	['oculus.png', 
	 'warning.png'].forEach(function(file, index)
	{
		copy(path.join(img_src, file), path.join(img_dst, file));
	});

	copy(path.join('tools', 'no_texture.publish.png'), path.join(img_dst, 'no_texture.png'));
	
	var scripts_src = path.join('browser', 'scripts');
	var scripts_dst = path.join(pub_dir, 'scripts');
	
	fs.mkdirSync(scripts_dst);
	['util.js',
	 'renderer.js',
	 'plugin-group.js',
	 'plugin-manager.js',
	 'connection.js',
	 'graph.js',
	 'node.js',
	 'registers.js',
	 'player.js',
	 'core.js'].forEach(function(file, index)
	{
		minify(path.join(scripts_src, file), path.join(scripts_dst, file));
	});

	var vendor_src = path.join('browser', 'vendor');
	var vendor_dst = path.join(pub_dir, 'vendor');
	
	fs.mkdirSync(vendor_dst);
	['jquery.fastfix.js',
	 'jquery.mousewheel.js',
	 'gl-matrix.js'].forEach(function(file, index)
	{
		minify(path.join(vendor_src, file), path.join(vendor_dst, file));
	});

	var jq_src = path.join('node_modules', 'jquery', 'dist');
	var jq_dst = path.join(pub_dir, 'node_modules', 'jquery', 'dist');
	
	mkdirsSync(jq_dst);
	minify(path.join(jq_src, 'jquery.min.js'), path.join(jq_dst, 'jquery.min.js'));

	copy(path.join('tools', 'player.html'), path.join(pub_dir, 'index.html'));

	find_unique_plugins(data.root);
	
	var plg_reg = {};
	var plg_src = '';
	
	unique_plugins.forEach(function(plugin, index)
	{
		plg_src += optimize_plugin(fs.readFileSync(path.join('browser', 'plugins', plugin + '.plugin.js'), { encoding: 'utf8' }));
		plg_reg['' + index] = plugin;
	});
	
	fs.mkdirSync(path.join(pub_dir, 'plugins'));
	fs.writeFileSync(path.join(pub_dir, 'plugins', 'plugins.json'), JSON.stringify(plg_reg));
	
	fs.writeFileSync(path.join(pub_dir, 'plugins', 'all.plugins.js'), plg_src);
	
	// Process any external dependcies by directory
	for(var i = 0; i < ext_depends.length; i++)
	{
		var dep = ext_depends[i];
		var in_path = path.join('browser', 'plugins', dep);
		var out_path = path.join(pub_dir, 'plugins', dep);
		var files = fs.readdirSync(in_path);
		
		fs.mkdirSync(out_path);
		
		for(var f = 0; f < files.length; f++)
		{
			var file = files[f];
			var ext = path.extname(file);
			var src = path.join(in_path, file);
			var dst = path.join(out_path, file);
			
			if(ext === '.js')
				minify(src, dst);
			else
				copy(src, dst);
		}
	}
}

publish(process.argv[2], process.argv[3]);
